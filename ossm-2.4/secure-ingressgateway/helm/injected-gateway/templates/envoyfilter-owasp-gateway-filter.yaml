---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: owasp-gateway-filter
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  # This section is needed to remove the server and x-envoy-upstream-service-time headers
  # taken from https://github.com/istio/istio/issues/13861
  - applyTo: NETWORK_FILTER 
    match:
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: MERGE
      value:
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
          server_header_transformation: PASS_THROUGH
  - applyTo: ROUTE_CONFIGURATION
    patch:
      operation: MERGE
      value:
        response_headers_to_remove:
        - "x-envoy-upstream-service-time"
        - "server"
  # this section provides other header manipulation
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      proxy:
        proxyVersion: '^1\.16.*'
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua.owaspfilter
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          defaultSourceCode:
            inlineString: |
              function envoy_on_response(response_handle)
                if response_handle:headers():get("ETag") then
                  response_handle:headers():remove("ETag");
                end
                if response_handle:headers():get("X-Powered-By") then
                  response_handle:headers():remove("X-Powered-By");
                end                  
                response_handle:headers():replace("X-XSS-Protection", "1; mode=block");
                response_handle:headers():replace("X-Content-Type-Options", "nosniff");
                response_handle:headers():replace("Strict-Transport-Security", "max-age=63072000;includeSubDomains;preload");
                if response_handle:headers():get("Set-Cookie") then
                  local cookies = response_handle:headers():get("Set-Cookie")
                  response_handle:headers():remove("Set-Cookie")
                  -- need to split the resulting cookie values since many Set-Cookie headers could be used
                  for cookie_val in string.gmatch(cookies, "([^,]+)") do
                    response_handle:logDebug("cookie: "..cookie_val)
                    response_handle:headers():add("Set-Cookie",cookie_val.."; HTTPOnly; Secure;")
                  end
                end

                response_handle:headers():replace("X-Frame-Options", "DENY");
                response_handle:headers():replace("Content-Security-Policy", "upgrade-insecure-requests; base-uri 'self'; frame-ancestors 'none'; script-src 'self'; form-action 'self'; frame-src 'none'; font-src 'none'; style-src 'self'; manifest-src 'none'; worker-src 'none'; media-src 'none'; object-src 'none';");
                response_handle:headers():replace("Referrer-Policy", "no-referrer");
                
                local contentType = response_handle:headers():get("Content-Type")
                if (contentType and (contentType=="application/ecmascript" or contentType=="application/javascript" or contentType=="text/css" or contentType:match"^font/" or contentType:match"^image/")) then
                  response_handle:headers():replace("Cache-Control", "no-cache=\"Set-Cookie,Authorization\"");
                else
                  response_handle:headers():replace("Cache-Control", "no-store, no-cache");
                end
              end
...
